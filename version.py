from github import Github  
from github import InputGitTreeElement
#svn python package (https://pypi.python.org/pypi/svn)
import git
import os
import base64


class Version(object):
    """ this is a class for github classes, possbily SVN api integration aswell """
    def __init__(self, token):
        #add if-else if SVN is integrated
        if(not isinstance(token, str)): #if token is not a valid string
            print("Please input a valid string as a token")
            exit()
        self._token = Github(token)
        self._lastcommit = 0 #try to get last commit number of given token 
        self._status = True
        self._ignore = ['.gif', '.jpg', '.png', '.mp3', '.mp4']
        self._repo = None
        self._repoName = None
        self._dir = ""

    def setup(self, repoName):
        """ this should be run if a repo hasn't been initialized yet. """
        self._repoName = 'repo/' + repoName
        self._repo = self._token.get_user().get_repo(repoName)
        settings = open('settings.txt', 'w')
        settings.write('repo:' + self._repoName + '\n')
        settings.write('ignore:' + str(self._ignore))
        settings.close()

    
    def do_commit(self, files):
        """ using path file, add file to project if not already included, otherwise update it """
        try:
            commit_message = str(self._lastcommit) + "this is an autogenerated commit message from vCtrl"
            for file in files:
                commit_message += ' ' + file + ' ' #adding each file name to commit message
            cwd = os.getcwd()
            print("cwd", cwd)
            os.chdir(os.path.join(cwd, self._dir))
            master_ref = self._repo.get_git_ref('heads/master')
            master_sha = master_ref.object.sha
            base_tree = self._repo.get_git_tree(master_sha)
            element_list = list()
            for i, entry in enumerate(files):
                with open(entry) as input_file:
                    data = input_file.read()
                if entry.endswith('.png'):
                    data = base64.b64encode(data)
                element = InputGitTreeElement(files[i], '100644', 'blob', data)
                element_list.append(element)
                    
            tree = self._repo.create_git_tree(element_list, base_tree)
            parent = self._repo.get_git_commit(master_sha)
            commit = self._repo.create_git_commit(commit_message, tree, [parent])
            master_ref.edit(commit.sha)
            os.chdir(cwd)            
            self._lastcommit += 1 #change this is the head commit/rev?

        except Exception as e:
            print( str(e) )
            print("error commiting",files, "please add to ignore list")
            exit()
        return True 
    
    def undo_commit(self, commit = 0):
        """ given a commit (defaults to last commit id), undo it """
        try:
            #rollback and make head 
            pass
        except:
            return False
        return True

    def get_commitID(self):
        """ returns last commit performed """
        return self._lastcommit

        
    def get_info(self):
        """ will use github package to find out the current status of the repo, total commits and time last updated """
        if(self._status):
            return "The repo is currently in good health"
        return "Uh oh there appears to be a problem with the repo"
    
    def write_settings(self):
        settings = open('settings.txt', 'w')
        settings.write("repo:" + self._repoName + "\n")
        settings.write("ignore:" + str(self._ignore))
        settings.close()
    

